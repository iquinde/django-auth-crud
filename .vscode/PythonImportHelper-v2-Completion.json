[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db",
        "description": "django.db",
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "myapp",
        "description": "myapp",
        "isExtraImport": true,
        "detail": "myapp",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "myapp.migrations.0001_initial",
        "description": "myapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Tasks',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "myapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TaskAdmin",
        "kind": 6,
        "importPath": "myapp.admin",
        "description": "myapp.admin",
        "peekOfCode": "class TaskAdmin(admin.ModelAdmin):\n    readonly_fields=(\"created\",)\nadmin.site.register(Tasks,TaskAdmin)",
        "detail": "myapp.admin",
        "documentation": {}
    },
    {
        "label": "MyappConfig",
        "kind": 6,
        "importPath": "myapp.apps",
        "description": "myapp.apps",
        "peekOfCode": "class MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'",
        "detail": "myapp.apps",
        "documentation": {}
    },
    {
        "label": "TaskForm",
        "kind": 6,
        "importPath": "myapp.forms",
        "description": "myapp.forms",
        "peekOfCode": "class TaskForm(forms.ModelForm):\n    class Meta:\n        model = Tasks\n        fields = ['title','description','important']\n        widgets = {\n            'title':forms.TextInput(attrs={'class':'form-control','placeholder':'Write a title'}),\n            'description':forms.Textarea(attrs={'class':'form-control','placeholder':'Write a descrption'}),\n            'important':forms.CheckboxInput(attrs={'class':'form-check-input m-auto'})\n        }",
        "detail": "myapp.forms",
        "documentation": {}
    },
    {
        "label": "Tasks",
        "kind": 6,
        "importPath": "myapp.models",
        "description": "myapp.models",
        "peekOfCode": "class Tasks(models.Model):\n    title=models.CharField(max_length=100)\n    description=models.TextField(blank=True)\n    created=models.DateTimeField(auto_now_add=True)\n    datecompletes=models.DateTimeField(null=True, blank=True)\n    important=models.BooleanField(default=False)\n    user=models.ForeignKey(User, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.title + ' - by ' + self.user.username",
        "detail": "myapp.models",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def home(request):\n    return render(request, 'home.html')\ndef signup(request):\n    if request.method == 'GET':\n        return render(request, 'signup.html', {\n            'form': UserCreationForm})\n    else:\n        if request.POST['password1'] == request.POST['password2']:\n            try:\n                user = User.objects.create_user(",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def signup(request):\n    if request.method == 'GET':\n        return render(request, 'signup.html', {\n            'form': UserCreationForm})\n    else:\n        if request.POST['password1'] == request.POST['password2']:\n            try:\n                user = User.objects.create_user(\n                    username=request.POST['username'], password=request.POST['password1'])\n                user.save()",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def tasks(request):\n    tasks=Tasks.objects.filter(user=request.user,datecompletes__isnull=True)\n    return render(request, 'tasks.html',{'tasks':tasks})\n@login_required\ndef tasks_completed(request):\n    tasks=Tasks.objects.filter(user=request.user,datecompletes__isnull=False).order_by('-datecompletes')\n    return render(request, 'tasks.html',{'tasks':tasks})\n@login_required\ndef create_task(request):\n    if request.method=='GET':",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "tasks_completed",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def tasks_completed(request):\n    tasks=Tasks.objects.filter(user=request.user,datecompletes__isnull=False).order_by('-datecompletes')\n    return render(request, 'tasks.html',{'tasks':tasks})\n@login_required\ndef create_task(request):\n    if request.method=='GET':\n        return render(request, 'create_task.html',{\n            'form':TaskForm\n         })\n    else:",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def create_task(request):\n    if request.method=='GET':\n        return render(request, 'create_task.html',{\n            'form':TaskForm\n         })\n    else:\n        try:\n            form=TaskForm(request.POST)\n            new_task=form.save(commit=False)\n            new_task.user=request.user",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "task_detail",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def task_detail(request, task_id):\n    if request.method=='GET':\n        task=get_object_or_404(Tasks, pk=task_id, user=request.user)\n        form=TaskForm(instance=task)\n        return render(request,'task_detail.html',{'task':task,'form':form})\n    else:\n        try:\n            task=get_object_or_404(Tasks, pk=task_id, user=request.user)\n            form=TaskForm(request.POST, instance=task)\n            form.save()",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "task_complete",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def task_complete(request, task_id):\n    task=get_object_or_404(Tasks, pk=task_id, user=request.user)\n    if request.method=='POST':\n        task.datecompletes=timezone.now()\n        task.save()\n        return redirect('tasks')\n@login_required\ndef task_delete(request, task_id):\n    task=get_object_or_404(Tasks, pk=task_id, user=request.user)\n    if request.method=='POST':",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "task_delete",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def task_delete(request, task_id):\n    task=get_object_or_404(Tasks, pk=task_id, user=request.user)\n    if request.method=='POST':\n        task.delete()\n        return redirect('tasks')\n@login_required\ndef signout(request):\n    logout(request)\n    return redirect('home')\ndef signin(request):",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "signout",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def signout(request):\n    logout(request)\n    return redirect('home')\ndef signin(request):\n    if request.method == 'GET':\n        return render(request, 'signin.html', {\n            'form': AuthenticationForm\n        })\n    else:\n        user=authenticate(",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": "myapp.views",
        "description": "myapp.views",
        "peekOfCode": "def signin(request):\n    if request.method == 'GET':\n        return render(request, 'signin.html', {\n            'form': AuthenticationForm\n        })\n    else:\n        user=authenticate(\n            request, username=request.POST['username'], password=request.POST['password'])\n        if user is None:\n            return render(request, 'signin.html', {",
        "detail": "myapp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Proyecto.asgi",
        "description": "Proyecto.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Proyecto.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = 'RENDER' not in os.environ\nALLOWED_HOSTS = []\nRENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = 'RENDER' not in os.environ\nALLOWED_HOSTS = []\nRENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "DEBUG = 'RENDER' not in os.environ\nALLOWED_HOSTS = []\nRENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nRENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "RENDER_EXTERNAL_HOSTNAME",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp'\n]\nMIDDLEWARE = [",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n]",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "ROOT_URLCONF = 'Proyecto.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Proyecto.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': dj_database_url.config(\n        default='postgresql://postgres:postgres@localhost:5432/mysite',\n        conn_max_age=600\n    )\n    #'default': {\n        #'ENGINE': 'django.db.backends.sqlite3',",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(\n        default='postgresql://postgres:postgres@localhost:5432/mysite',\n        conn_max_age=600\n    )\n    #'default': {\n        #'ENGINE': 'django.db.backends.sqlite3',\n        #'NAME': BASE_DIR / 'db.sqlite3',\n    #}\n}",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nif not DEBUG:\n    # Tell Django to copy statics to the `staticfiles` directory\n    # in your application directory on Render.",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nif not DEBUG:\n    # Tell Django to copy statics to the `staticfiles` directory\n    # in your application directory on Render.\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nif not DEBUG:\n    # Tell Django to copy statics to the `staticfiles` directory\n    # in your application directory on Render.\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Turn on WhiteNoise storage backend that takes care of compressing static files",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nif not DEBUG:\n    # Tell Django to copy statics to the `staticfiles` directory\n    # in your application directory on Render.\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Turn on WhiteNoise storage backend that takes care of compressing static files\n    # and creating unique names for each version so they can safely be cached forever.",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nif not DEBUG:\n    # Tell Django to copy statics to the `staticfiles` directory\n    # in your application directory on Render.\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Turn on WhiteNoise storage backend that takes care of compressing static files\n    # and creating unique names for each version so they can safely be cached forever.\n    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nLOGIN_URL = '/signin'\n# Default primary key field type",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "LOGIN_URL = '/signin'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Proyecto.settings",
        "description": "Proyecto.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Proyecto.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Proyecto.urls",
        "description": "Proyecto.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('tasks/', views.tasks, name='tasks'),\n    path('tasks_completed/', views.tasks_completed, name='tasks_completed'),\n    path('task/create/', views.create_task, name='create_task'),\n    path('task/<int:task_id>/', views.task_detail, name='task_detail'),\n    path('task/<int:task_id>/complete', views.task_complete, name='task_complete'),\n    path('task/<int:task_id>/delete', views.task_delete, name='task_delete'),",
        "detail": "Proyecto.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Proyecto.wsgi",
        "description": "Proyecto.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Proyecto.wsgi",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Proyecto.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]